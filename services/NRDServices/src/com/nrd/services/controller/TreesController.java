/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.nrd.services.Trees;
import com.nrd.services.service.TreesService;


/**
 * Controller object for domain model class Trees.
 * @see Trees
 */
@RestController("NRDServices.TreesController")
@Api(value = "TreesController", description = "Exposes APIs to work with Trees resource.")
@RequestMapping("/NRDServices/Trees")
public class TreesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreesController.class);

    @Autowired
	@Qualifier("NRDServices.TreesService")
	private TreesService treesService;

	@ApiOperation(value = "Creates a new Trees instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Trees createTrees(@RequestBody Trees trees) {
		LOGGER.debug("Create Trees with information: {}" , trees);

		trees = treesService.create(trees);
		LOGGER.debug("Created Trees with information: {}" , trees);

	    return trees;
	}


    @ApiOperation(value = "Returns the Trees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Trees getTrees(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Trees with id: {}" , id);

        Trees foundTrees = treesService.getById(id);
        LOGGER.debug("Trees details with id: {}" , foundTrees);

        return foundTrees;
    }

    @ApiOperation(value = "Updates the Trees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Trees editTrees(@PathVariable("id") String id, @RequestBody Trees trees) throws EntityNotFoundException {
        LOGGER.debug("Editing Trees with id: {}" , trees.getTreeTag());

        trees.setTreeTag(id);
        trees = treesService.update(trees);
        LOGGER.debug("Trees details with id: {}" , trees);

        return trees;
    }

    @ApiOperation(value = "Deletes the Trees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTrees(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Trees with id: {}" , id);

        Trees deletedTrees = treesService.delete(id);

        return deletedTrees != null;
    }

    /**
     * @deprecated Use {@link #findTrees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Trees instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Trees> searchTreesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Trees list");
        return treesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Trees instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Trees> findTrees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Trees list");
        return treesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Trees instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Trees> filterTrees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Trees list");
        return treesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTrees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return treesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Trees instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTrees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Trees");
		return treesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTreesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return treesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TreesService instance
	 */
	protected void setTreesService(TreesService service) {
		this.treesService = service;
	}

}

