/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.nrd.services.TreeSpecies;
import com.nrd.services.service.TreeSpeciesService;


/**
 * Controller object for domain model class TreeSpecies.
 * @see TreeSpecies
 */
@RestController("NRDServices.TreeSpeciesController")
@Api(value = "TreeSpeciesController", description = "Exposes APIs to work with TreeSpecies resource.")
@RequestMapping("/NRDServices/TreeSpecies")
public class TreeSpeciesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreeSpeciesController.class);

    @Autowired
	@Qualifier("NRDServices.TreeSpeciesService")
	private TreeSpeciesService treeSpeciesService;

	@ApiOperation(value = "Creates a new TreeSpecies instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TreeSpecies createTreeSpecies(@RequestBody TreeSpecies treeSpecies) {
		LOGGER.debug("Create TreeSpecies with information: {}" , treeSpecies);

		treeSpecies = treeSpeciesService.create(treeSpecies);
		LOGGER.debug("Created TreeSpecies with information: {}" , treeSpecies);

	    return treeSpecies;
	}


    @ApiOperation(value = "Returns the TreeSpecies instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TreeSpecies getTreeSpecies(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting TreeSpecies with id: {}" , id);

        TreeSpecies foundTreeSpecies = treeSpeciesService.getById(id);
        LOGGER.debug("TreeSpecies details with id: {}" , foundTreeSpecies);

        return foundTreeSpecies;
    }

    @ApiOperation(value = "Updates the TreeSpecies instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TreeSpecies editTreeSpecies(@PathVariable("id") String id, @RequestBody TreeSpecies treeSpecies) throws EntityNotFoundException {
        LOGGER.debug("Editing TreeSpecies with id: {}" , treeSpecies.getSpecieCode());

        treeSpecies.setSpecieCode(id);
        treeSpecies = treeSpeciesService.update(treeSpecies);
        LOGGER.debug("TreeSpecies details with id: {}" , treeSpecies);

        return treeSpecies;
    }

    @ApiOperation(value = "Deletes the TreeSpecies instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTreeSpecies(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TreeSpecies with id: {}" , id);

        TreeSpecies deletedTreeSpecies = treeSpeciesService.delete(id);

        return deletedTreeSpecies != null;
    }

    /**
     * @deprecated Use {@link #findTreeSpecies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TreeSpecies instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TreeSpecies> searchTreeSpeciesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TreeSpecies list");
        return treeSpeciesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TreeSpecies instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TreeSpecies> findTreeSpecies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TreeSpecies list");
        return treeSpeciesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TreeSpecies instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TreeSpecies> filterTreeSpecies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TreeSpecies list");
        return treeSpeciesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTreeSpecies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return treeSpeciesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TreeSpecies instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTreeSpecies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TreeSpecies");
		return treeSpeciesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTreeSpeciesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return treeSpeciesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TreeSpeciesService instance
	 */
	protected void setTreeSpeciesService(TreeSpeciesService service) {
		this.treeSpeciesService = service;
	}

}

