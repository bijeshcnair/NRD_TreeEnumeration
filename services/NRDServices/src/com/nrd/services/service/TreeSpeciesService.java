/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.TreeEnumerations;
import com.nrd.services.TreeSpecies;
import com.nrd.services.Trees;

/**
 * Service object for domain model class {@link TreeSpecies}.
 */
public interface TreeSpeciesService {

    /**
     * Creates a new TreeSpecies. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TreeSpecies if any.
     *
     * @param treeSpecies Details of the TreeSpecies to be created; value cannot be null.
     * @return The newly created TreeSpecies.
     */
	TreeSpecies create(TreeSpecies treeSpecies);


	/**
	 * Returns TreeSpecies by given id if exists.
	 *
	 * @param treespeciesId The id of the TreeSpecies to get; value cannot be null.
	 * @return TreeSpecies associated with the given treespeciesId.
     * @throws EntityNotFoundException If no TreeSpecies is found.
	 */
	TreeSpecies getById(String treespeciesId) throws EntityNotFoundException;

    /**
	 * Find and return the TreeSpecies by given id if exists, returns null otherwise.
	 *
	 * @param treespeciesId The id of the TreeSpecies to get; value cannot be null.
	 * @return TreeSpecies associated with the given treespeciesId.
	 */
	TreeSpecies findById(String treespeciesId);


	/**
	 * Updates the details of an existing TreeSpecies. It replaces all fields of the existing TreeSpecies with the given treeSpecies.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TreeSpecies if any.
     *
	 * @param treeSpecies The details of the TreeSpecies to be updated; value cannot be null.
	 * @return The updated TreeSpecies.
	 * @throws EntityNotFoundException if no TreeSpecies is found with given input.
	 */
	TreeSpecies update(TreeSpecies treeSpecies) throws EntityNotFoundException;

    /**
	 * Deletes an existing TreeSpecies with the given id.
	 *
	 * @param treespeciesId The id of the TreeSpecies to be deleted; value cannot be null.
	 * @return The deleted TreeSpecies.
	 * @throws EntityNotFoundException if no TreeSpecies found with the given id.
	 */
	TreeSpecies delete(String treespeciesId) throws EntityNotFoundException;

	/**
	 * Find all TreeSpecies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TreeSpecies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TreeSpecies> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TreeSpecies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TreeSpecies.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TreeSpecies> findAll(String query, Pageable pageable);

    /**
	 * Exports all TreeSpecies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TreeSpecies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TreeSpecies.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated treeEnumerationses for given TreeSpecies id.
     *
     * @param specieCode value of specieCode; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TreeEnumerations instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TreeEnumerations> findAssociatedTreeEnumerationses(String specieCode, Pageable pageable);

    /*
     * Returns the associated treeses for given TreeSpecies id.
     *
     * @param specieCode value of specieCode; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Trees instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Trees> findAssociatedTreeses(String specieCode, Pageable pageable);

}

