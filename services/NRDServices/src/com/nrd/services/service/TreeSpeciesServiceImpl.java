/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.TreeEnumerations;
import com.nrd.services.TreeSpecies;
import com.nrd.services.Trees;


/**
 * ServiceImpl object for domain model class TreeSpecies.
 *
 * @see TreeSpecies
 */
@Service("NRDServices.TreeSpeciesService")
public class TreeSpeciesServiceImpl implements TreeSpeciesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreeSpeciesServiceImpl.class);

    @Autowired
	@Qualifier("NRDServices.TreesService")
	private TreesService treesService;

    @Autowired
	@Qualifier("NRDServices.TreeEnumerationsService")
	private TreeEnumerationsService treeEnumerationsService;

    @Autowired
    @Qualifier("NRDServices.TreeSpeciesDao")
    private WMGenericDao<TreeSpecies, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TreeSpecies, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NRDServicesTransactionManager")
    @Override
	public TreeSpecies create(TreeSpecies treeSpecies) {
        LOGGER.debug("Creating a new TreeSpecies with information: {}", treeSpecies);
        TreeSpecies treeSpeciesCreated = this.wmGenericDao.create(treeSpecies);
        if(treeSpeciesCreated.getTreeEnumerationses() != null) {
            for(TreeEnumerations treeEnumerationse : treeSpeciesCreated.getTreeEnumerationses()) {
                treeEnumerationse.setTreeSpecies(treeSpeciesCreated);
                LOGGER.debug("Creating a new child TreeEnumerations with information: {}", treeEnumerationse);
                treeEnumerationsService.create(treeEnumerationse);
            }
        }

        if(treeSpeciesCreated.getTreeses() != null) {
            for(Trees treese : treeSpeciesCreated.getTreeses()) {
                treese.setTreeSpecies(treeSpeciesCreated);
                LOGGER.debug("Creating a new child Trees with information: {}", treese);
                treesService.create(treese);
            }
        }
        return treeSpeciesCreated;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public TreeSpecies getById(String treespeciesId) throws EntityNotFoundException {
        LOGGER.debug("Finding TreeSpecies by id: {}", treespeciesId);
        TreeSpecies treeSpecies = this.wmGenericDao.findById(treespeciesId);
        if (treeSpecies == null){
            LOGGER.debug("No TreeSpecies found with id: {}", treespeciesId);
            throw new EntityNotFoundException(String.valueOf(treespeciesId));
        }
        return treeSpecies;
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public TreeSpecies findById(String treespeciesId) {
        LOGGER.debug("Finding TreeSpecies by id: {}", treespeciesId);
        return this.wmGenericDao.findById(treespeciesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NRDServicesTransactionManager")
	@Override
	public TreeSpecies update(TreeSpecies treeSpecies) throws EntityNotFoundException {
        LOGGER.debug("Updating TreeSpecies with information: {}", treeSpecies);
        this.wmGenericDao.update(treeSpecies);

        String treespeciesId = treeSpecies.getSpecieCode();

        return this.wmGenericDao.findById(treespeciesId);
    }

    @Transactional(value = "NRDServicesTransactionManager")
	@Override
	public TreeSpecies delete(String treespeciesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TreeSpecies with id: {}", treespeciesId);
        TreeSpecies deleted = this.wmGenericDao.findById(treespeciesId);
        if (deleted == null) {
            LOGGER.debug("No TreeSpecies found with id: {}", treespeciesId);
            throw new EntityNotFoundException(String.valueOf(treespeciesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public Page<TreeSpecies> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TreeSpecies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Page<TreeSpecies> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TreeSpecies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NRDServices for table TreeSpecies to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Page<TreeEnumerations> findAssociatedTreeEnumerationses(String specieCode, Pageable pageable) {
        LOGGER.debug("Fetching all associated treeEnumerationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("treeSpecies.specieCode = '" + specieCode + "'");

        return treeEnumerationsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Page<Trees> findAssociatedTreeses(String specieCode, Pageable pageable) {
        LOGGER.debug("Fetching all associated treeses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("treeSpecies.specieCode = '" + specieCode + "'");

        return treesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TreesService instance
	 */
	protected void setTreesService(TreesService service) {
        this.treesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TreeEnumerationsService instance
	 */
	protected void setTreeEnumerationsService(TreeEnumerationsService service) {
        this.treeEnumerationsService = service;
    }

}

