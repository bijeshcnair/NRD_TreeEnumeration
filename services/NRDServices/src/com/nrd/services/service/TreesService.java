/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.Trees;

/**
 * Service object for domain model class {@link Trees}.
 */
public interface TreesService {

    /**
     * Creates a new Trees. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Trees if any.
     *
     * @param trees Details of the Trees to be created; value cannot be null.
     * @return The newly created Trees.
     */
	Trees create(Trees trees);


	/**
	 * Returns Trees by given id if exists.
	 *
	 * @param treesId The id of the Trees to get; value cannot be null.
	 * @return Trees associated with the given treesId.
     * @throws EntityNotFoundException If no Trees is found.
	 */
	Trees getById(String treesId) throws EntityNotFoundException;

    /**
	 * Find and return the Trees by given id if exists, returns null otherwise.
	 *
	 * @param treesId The id of the Trees to get; value cannot be null.
	 * @return Trees associated with the given treesId.
	 */
	Trees findById(String treesId);


	/**
	 * Updates the details of an existing Trees. It replaces all fields of the existing Trees with the given trees.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Trees if any.
     *
	 * @param trees The details of the Trees to be updated; value cannot be null.
	 * @return The updated Trees.
	 * @throws EntityNotFoundException if no Trees is found with given input.
	 */
	Trees update(Trees trees) throws EntityNotFoundException;

    /**
	 * Deletes an existing Trees with the given id.
	 *
	 * @param treesId The id of the Trees to be deleted; value cannot be null.
	 * @return The deleted Trees.
	 * @throws EntityNotFoundException if no Trees found with the given id.
	 */
	Trees delete(String treesId) throws EntityNotFoundException;

	/**
	 * Find all Trees matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Trees.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Trees> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Trees matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Trees.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Trees> findAll(String query, Pageable pageable);

    /**
	 * Exports all Trees matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Trees in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Trees.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

