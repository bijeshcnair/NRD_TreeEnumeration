/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.TreeEnumerations;

/**
 * Service object for domain model class {@link TreeEnumerations}.
 */
public interface TreeEnumerationsService {

    /**
     * Creates a new TreeEnumerations. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TreeEnumerations if any.
     *
     * @param treeEnumerations Details of the TreeEnumerations to be created; value cannot be null.
     * @return The newly created TreeEnumerations.
     */
	TreeEnumerations create(TreeEnumerations treeEnumerations);


	/**
	 * Returns TreeEnumerations by given id if exists.
	 *
	 * @param treeenumerationsId The id of the TreeEnumerations to get; value cannot be null.
	 * @return TreeEnumerations associated with the given treeenumerationsId.
     * @throws EntityNotFoundException If no TreeEnumerations is found.
	 */
	TreeEnumerations getById(String treeenumerationsId) throws EntityNotFoundException;

    /**
	 * Find and return the TreeEnumerations by given id if exists, returns null otherwise.
	 *
	 * @param treeenumerationsId The id of the TreeEnumerations to get; value cannot be null.
	 * @return TreeEnumerations associated with the given treeenumerationsId.
	 */
	TreeEnumerations findById(String treeenumerationsId);


	/**
	 * Updates the details of an existing TreeEnumerations. It replaces all fields of the existing TreeEnumerations with the given treeEnumerations.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TreeEnumerations if any.
     *
	 * @param treeEnumerations The details of the TreeEnumerations to be updated; value cannot be null.
	 * @return The updated TreeEnumerations.
	 * @throws EntityNotFoundException if no TreeEnumerations is found with given input.
	 */
	TreeEnumerations update(TreeEnumerations treeEnumerations) throws EntityNotFoundException;

    /**
	 * Deletes an existing TreeEnumerations with the given id.
	 *
	 * @param treeenumerationsId The id of the TreeEnumerations to be deleted; value cannot be null.
	 * @return The deleted TreeEnumerations.
	 * @throws EntityNotFoundException if no TreeEnumerations found with the given id.
	 */
	TreeEnumerations delete(String treeenumerationsId) throws EntityNotFoundException;

	/**
	 * Find all TreeEnumerations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TreeEnumerations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TreeEnumerations> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TreeEnumerations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TreeEnumerations.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TreeEnumerations> findAll(String query, Pageable pageable);

    /**
	 * Exports all TreeEnumerations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TreeEnumerations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TreeEnumerations.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

