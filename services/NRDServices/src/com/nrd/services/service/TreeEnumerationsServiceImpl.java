/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.TreeEnumerations;


/**
 * ServiceImpl object for domain model class TreeEnumerations.
 *
 * @see TreeEnumerations
 */
@Service("NRDServices.TreeEnumerationsService")
public class TreeEnumerationsServiceImpl implements TreeEnumerationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreeEnumerationsServiceImpl.class);


    @Autowired
    @Qualifier("NRDServices.TreeEnumerationsDao")
    private WMGenericDao<TreeEnumerations, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TreeEnumerations, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NRDServicesTransactionManager")
    @Override
	public TreeEnumerations create(TreeEnumerations treeEnumerations) {
        LOGGER.debug("Creating a new TreeEnumerations with information: {}", treeEnumerations);
        TreeEnumerations treeEnumerationsCreated = this.wmGenericDao.create(treeEnumerations);
        return treeEnumerationsCreated;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public TreeEnumerations getById(String treeenumerationsId) throws EntityNotFoundException {
        LOGGER.debug("Finding TreeEnumerations by id: {}", treeenumerationsId);
        TreeEnumerations treeEnumerations = this.wmGenericDao.findById(treeenumerationsId);
        if (treeEnumerations == null){
            LOGGER.debug("No TreeEnumerations found with id: {}", treeenumerationsId);
            throw new EntityNotFoundException(String.valueOf(treeenumerationsId));
        }
        return treeEnumerations;
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public TreeEnumerations findById(String treeenumerationsId) {
        LOGGER.debug("Finding TreeEnumerations by id: {}", treeenumerationsId);
        return this.wmGenericDao.findById(treeenumerationsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NRDServicesTransactionManager")
	@Override
	public TreeEnumerations update(TreeEnumerations treeEnumerations) throws EntityNotFoundException {
        LOGGER.debug("Updating TreeEnumerations with information: {}", treeEnumerations);
        this.wmGenericDao.update(treeEnumerations);

        String treeenumerationsId = treeEnumerations.getTreeTag();

        return this.wmGenericDao.findById(treeenumerationsId);
    }

    @Transactional(value = "NRDServicesTransactionManager")
	@Override
	public TreeEnumerations delete(String treeenumerationsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TreeEnumerations with id: {}", treeenumerationsId);
        TreeEnumerations deleted = this.wmGenericDao.findById(treeenumerationsId);
        if (deleted == null) {
            LOGGER.debug("No TreeEnumerations found with id: {}", treeenumerationsId);
            throw new EntityNotFoundException(String.valueOf(treeenumerationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public Page<TreeEnumerations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TreeEnumerations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Page<TreeEnumerations> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TreeEnumerations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NRDServices for table TreeEnumerations to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

