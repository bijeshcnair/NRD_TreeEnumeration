/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.nrd.services.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nrd.services.Trees;


/**
 * ServiceImpl object for domain model class Trees.
 *
 * @see Trees
 */
@Service("NRDServices.TreesService")
public class TreesServiceImpl implements TreesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreesServiceImpl.class);


    @Autowired
    @Qualifier("NRDServices.TreesDao")
    private WMGenericDao<Trees, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Trees, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NRDServicesTransactionManager")
    @Override
	public Trees create(Trees trees) {
        LOGGER.debug("Creating a new Trees with information: {}", trees);
        Trees treesCreated = this.wmGenericDao.create(trees);
        return treesCreated;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public Trees getById(String treesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Trees by id: {}", treesId);
        Trees trees = this.wmGenericDao.findById(treesId);
        if (trees == null){
            LOGGER.debug("No Trees found with id: {}", treesId);
            throw new EntityNotFoundException(String.valueOf(treesId));
        }
        return trees;
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public Trees findById(String treesId) {
        LOGGER.debug("Finding Trees by id: {}", treesId);
        return this.wmGenericDao.findById(treesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NRDServicesTransactionManager")
	@Override
	public Trees update(Trees trees) throws EntityNotFoundException {
        LOGGER.debug("Updating Trees with information: {}", trees);
        this.wmGenericDao.update(trees);

        String treesId = trees.getTreeTag();

        return this.wmGenericDao.findById(treesId);
    }

    @Transactional(value = "NRDServicesTransactionManager")
	@Override
	public Trees delete(String treesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Trees with id: {}", treesId);
        Trees deleted = this.wmGenericDao.findById(treesId);
        if (deleted == null) {
            LOGGER.debug("No Trees found with id: {}", treesId);
            throw new EntityNotFoundException(String.valueOf(treesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public Page<Trees> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Trees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Page<Trees> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Trees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NRDServices for table Trees to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NRDServicesTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

